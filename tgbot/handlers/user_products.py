# - *- coding: utf- 8 - *-
import asyncio
from tgbot.utils.utils_functions import get_admins
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from tgbot.services.sqlite import get_user
from design import no_cats, available_cats, no_products, current_cat, current_pod_cat, open_pos_text, here_count_products, \
choose_buy_product, no_balance, no_product, no_num_count, choose_buy_products, gen_products, yes_buy_items, otmena_buy, edit_prod
from tgbot.keyboards.inline_user import back_to_user_menu, user_menu, open_products, open_positions, open_pod_cat_positions, \
pos_buy_inl, choose_buy_items
from tgbot.services.sqlite import get_all_categories, get_positions, get_category, get_pod_category, get_position, \
get_items, buy_item, update_user, add_purchase
from tgbot.data.loader import dp, bot
from tgbot.utils.utils_functions import split_messages, get_date, get_unix, send_admins
from contextlib import suppress
from aiogram.utils.exceptions import MessageCantBeDeleted
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tgbot.utils.crypto import convert_rub_to_crypto  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
from tgbot.keyboards.inline_user import payment_method_menu
from tgbot.keyboards.inline_user import crypto_currency_menu
from tgbot.keyboards.inline_user import color_selection_keyboard
from tgbot.keyboards.inline_user import storage_selection_keyboard
from tgbot.services.sqlite import get_payments
from tgbot.services.sqlite import get_variants
from tgbot.services.sqlite import get_variant_by_params
from tgbot.services.sqlite import get_position_by_short_id
from tgbot.services.sqlite import db_execute
from tgbot.services.sqlite import db_fetchone

from tgbot.utils.translator import auto_translate

COLOR_MAP = {
    "blk": "Black",
    "whe": "White",
    "red": "Red",
    "ble": "Blue",
    "grn": "Green",
    "yew": "Yellow",
    "pue": "Purple",
    "pik": "Pink",
    "sir": "Silver",
    "spy": "Space Gray",
    "mit": "Midnight",
    "stt": "Starlight",
    "god": "Gold",
    "gre": "Graphite",
    "sie": "Sierra Blue",
    "aln": "Alpine Green",
    "dee": "Deep Purple",
    "nam": "Natural Titanium",
    "blm": "Blue Titanium",
    "whm": "White Titanium",
    "blm": "Black Titanium"
}


@dp.callback_query_handler(text="products:open", state="*")
async def open_products_users(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if len(get_all_categories()) < 1:
        await call.message.delete()
        await call.message.answer(no_cats, reply_markup=back_to_user_menu())
    else:
        await call.message.delete()
        await call.message.answer(auto_translate(user_id, f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>"), reply_markup=open_products())

@dp.callback_query_handler(text_startswith="open_category:", state="*")
async def open_cat_for_buy(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cat_id = call.data.split(":")[1]
    category = get_category(cat_id)
    
    if len(get_positions(cat_id)) < 1:
        await call.message.delete()
        await call.message.answer(no_products, reply_markup=back_to_user_menu())
    else:
        await call.message.delete()

        if category['photo']:
            await call.message.answer_photo(photo=category['photo'], caption=auto_translate(user_id, "<b>–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name}:</b>").format(name=get_category(cat_id)['name']), reply_markup=open_positions(cat_id))
        else:
            await call.message.answer(auto_translate(user_id, f"<b>–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name}:</b>").format(name=get_category(cat_id)['name']), reply_markup=open_positions(cat_id))

@dp.callback_query_handler(text_startswith="open_pod_cat:", state="*")
async def open_pod_cat(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pod_cat_id = call.data.split(":")[1]

    if len(get_positions(pod_cat_id=pod_cat_id)) < 1:
        await call.message.delete()
        await call.message.answer(no_products)
    else:
        await call.message.delete()
        await call.message.answer(current_pod_cat.format(name=get_pod_category(pod_cat_id)['name']), reply_markup=open_pod_cat_positions(pod_cat_id))

@dp.callback_query_handler(text_startswith="open_pos:", state="*")
async def open_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()
    pos_id = call.data.split(":")[1]
    pos = get_position(pos_id)
    cat = get_category(pos['category_id'])
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    variants = get_variants(pos_id)
    colors = list(set(v['color'] for v in variants))

    if not colors:
        await call.message.answer(auto_translate(user_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."))
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ
    keyboard, text, photo = color_selection_keyboard(colors, pos_id, pos, user_id)

    await state.update_data(product_id=pos_id)

    if photo and photo != "-":
        await call.message.delete()
        await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption=text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await call.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

####

@dp.callback_query_handler(text_startswith="select_color:", state="*")
async def select_color(call: CallbackQuery, state: FSMContext):
    _, color, product_id = call.data.split(":")
    pos = get_position(product_id)
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    variants = get_variants(product_id)
    storages = list(set(v['storage_capacity'] for v in variants if v['color'] == color))

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ
    keyboard, text, photo = storage_selection_keyboard(storages, product_id, color, pos, user_id)

    await state.update_data(color=color)
    
    if photo and photo != "-":
        await call.message.delete()
        await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption=text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@dp.callback_query_handler(text_startswith="select_storage:", state="*")
async def select_storage(call: CallbackQuery, state: FSMContext):
    _, storage, product_id, color = call.data.split(":")
    variant = get_variant_by_params(product_id, color, storage)

    await state.update_data(storage=storage, price=variant['price'])
    pos = get_position(product_id)
    cat = get_category(pos['category_id'])
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    msg = auto_translate(user_id, f"""
<b>üíé –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {cat['name']}
<b>üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç: </b> {pos['name']}
<b>üí∞ –¶–µ–Ω–∞: </b> {variant['price']} USD
<b>üé® –¶–≤–µ—Ç: </b> {color}
<b>üíæ –ü–∞–º—è—Ç—å: </b> {storage} 

üé≤ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {pos['description'] or '‚ùóÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ'}
""")
    

    keyboard = pos_buy_inl(product_id, color, storage, variant['price'], user_id)

    if pos['photo'] and pos['photo'] != "-":
        try:
            await call.message.delete()
        except Exception:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É

        await bot.send_photo(chat_id=call.from_user.id, photo=pos['photo'], caption=msg, reply_markup=keyboard, parse_mode="HTML")
    else:
        try:
            await call.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")
        except aiogram.utils.exceptions.BadRequest:
            await call.message.answer(msg, reply_markup=keyboard, parse_mode="HTML")




# # # –¥–æ —ç—Ç —Ä–± –≤–∞—Ä

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
def payment_method_menu(pos_id, amount_rub, color, storage, user_id):
    keyboard = InlineKeyboardMarkup()
    
    short_color = color[:2] + color[-1].lower()  # –ü–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã –æ—Ç —Ü–≤–µ—Ç–∞
    short_storage = storage.replace("TB", "").replace("GB", "")  # –£–±–∏—Ä–∞–µ–º "GB"
    
    card_callback = f"pay_method:card:{pos_id}:{amount_rub}:{short_color}:{short_storage}"
    crypto_callback = f"pay_method:crypto:{pos_id}:{amount_rub}:{short_color}:{short_storage}"
    
    print(f"DEBUG: card_callback = {card_callback}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"DEBUG: crypto_callback = {crypto_callback}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    
    keyboard.add(InlineKeyboardButton(auto_translate(user_id, "üí≥ bank card"), callback_data=card_callback))
    keyboard.add(InlineKeyboardButton(auto_translate(user_id, "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"), callback_data=crypto_callback))
    
    return keyboard


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã


# –ö–Ω–æ–ø–∫–∞ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
def confirm_payment_button(pos_id, color, storage, price):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ I Paid", callback_data=f"confirm_payment:{pos_id}:{color}:{storage}:{price}"))
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å)
def admin_payment_decision(pos_id, user_id, color, storage, price):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_card:{user_id}:{pos_id}:{color}:{storage}:{price}"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_card:{user_id}"))
    return keyboard
# –ö–Ω–æ–ø–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
def final_admin_decision(user_id, pos_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"final_approve:{user_id}:{pos_id}"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"final_decline:{user_id}"))
    return keyboard

@dp.callback_query_handler(text_startswith='buy_pos1:', state="*")
async def pos_buy(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π state
    user_id1 = call.message.from_user.id
    color = data.get("color", "–ù–µ —É–∫–∞–∑–∞–Ω")
    storage = data.get("storage", "–ù–µ —É–∫–∞–∑–∞–Ω")
    price = data.get("price", 0)

    await state.finish()  # –û—á–∏—â–∞–µ–º state —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.answer(auto_translate(user_id, f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>\n\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} USD\nüé® <b>–¶–≤–µ—Ç:</b> {color}\nüíæ <b>–ü–∞–º—è—Ç—å:</b> {storage}"), 
                                 reply_markup=payment_method_menu(call.data.split(":")[1], price, color, storage, user_id))

@dp.callback_query_handler(text_startswith='pay_method:', state="*")
async def payment_method(call: CallbackQuery, state: FSMContext):
    data = call.data.split(":")
    
    if len(data) < 6:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–∂–∏–¥–∞–µ–º 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–µ—Ç–æ–¥, pos_id, —Å—É–º–º–∞, —Ü–≤–µ—Ç, –ø–∞–º—è—Ç—å)
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–Ω–æ–ø–∫–µ –æ–ø–ª–∞—Ç—ã.")
        return
    
    method, pos_id, amount_rub, color, storage = data[1:]
   # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
    color1 = COLOR_MAP.get(color.lower(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç")
    storage_value = int(storage)
    storage_unit = "TB" if storage_value < 10 else "GB"
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if method == "crypto":
        await call.message.edit_text(auto_translate(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:"), 
                                     reply_markup=crypto_currency_menu(pos_id, amount_rub, color, storage, user_id))
    
    elif method == "card":
        pos = get_position(pos_id)
        admin_msg_template = auto_translate(user_id, "üí≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π!\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username} ({call.from_user.id})\n"
                     f"üõí –ü—Ä–æ–¥—É–∫—Ç: {pos['name']}\n"
                     f"üé® –¶–≤–µ—Ç: {color1}\n"
                     f"üíæ –ü–∞–º—è—Ç—å: {storage}{storage_unit}\n"
                     f"üíµ –°—É–º–º–∞: {amount_rub}")
                     
        admin_msg = admin_msg_template.format(
            username=call.from_user.username,
            user_id=call.from_user.id,
            product_name=pos['name'],
            color=color1,
            storage=storage,
            storage_unit=storage_unit,
            amount=amount_rub
            )
        
        for admin_id in get_admins():
            await bot.send_message(admin_id, admin_msg, 
                                   reply_markup=admin_payment_decision(pos_id, call.from_user.id, color, storage, amount_rub))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        
        await call.message.edit_text(auto_translate(user_id, "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω –≤—ã—à–ª–µ—Ç –≤–∞–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã."))
        
@dp.callback_query_handler(text_startswith='pay_crypto:', state="*")
async def send_crypto_address(call: CallbackQuery, state: FSMContext):
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω! call.data = {call.data}")  # –û—Ç–ª–∞–¥–∫–∞
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    data = call.data.split(":")
    if len(data) < 5:
        await call.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏!"), show_alert=True)
        return

    crypto, pos_id, amount_rub, color, storage = data[1:]
    print(f"DEBUG: crypto={crypto}, pos_id={pos_id}, amount_rub={amount_rub}, color={color}, storage={storage}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    pos = get_position(pos_id)
    if not pos:
        await call.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."), show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∞
    payments = get_payments()
    address = payments.get(f"{crypto}_adrs")
    if not address:
        await call.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."), show_alert=True)
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
    amount_crypto = round(convert_rub_to_crypto(float(amount_rub), crypto), 4)
    if amount_crypto == 0.0:
        await call.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."), show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    db_execute(
        "INSERT INTO temp_payments (pos_id, user_id, crypto, amount_crypto, color, storage) VALUES (?, ?, ?, ?, ?, ?)",
        (pos_id, call.from_user.id, crypto, amount_crypto, color, storage)
    )

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    payment = db_fetchone("SELECT id FROM temp_payments WHERE user_id = ? ORDER BY id DESC LIMIT 1", (call.from_user.id,))
    if not payment:
        await call.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂."), show_alert=True)
        return
    color1 = COLOR_MAP.get(color.lower(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç")
    storage_value = int(storage)
    storage_unit = "TB" if storage_value < 10 else "GB"
    payment_id = payment["id"]
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î (payment_id = {payment_id}) –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    msg = auto_translate(user_id, f"""
üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç: {pos['name']}  
üé® –¶–≤–µ—Ç: {color1}  
üíæ –ü–∞–º—è—Ç—å: {storage}{storage_unit}  

üí∞ –û–ø–ª–∞—Ç–∞ <b> {crypto.upper()} </b>  
üìç –ê–¥—Ä–µ—Å: <code>{address} </code> 
üíµ –°—É–º–º–∞: <b>{amount_crypto} {crypto.upper()}</b>  

–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ I Paid¬ª.
""")

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(auto_translate(user_id, "‚úÖ I Paid"), callback_data=f"confirm_payment:{payment_id}")  # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ ID!
    )

    await call.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")




@dp.callback_query_handler(text_startswith='accept_card:', state="*")
async def accept_card_payment(call: CallbackQuery, state: FSMContext):
    _, user_id, pos_id, color, storage, price = call.data.split(":")
    
    await state.update_data(card_payment_user=user_id, 
                            card_payment_pos=pos_id,
                            selected_color=color,
                            selected_storage=storage,
                            final_price=price)
    
    await call.message.answer(auto_translate(user_id, "‚úÖ –í–≤–µ–¥–∏—Ç–µ –°—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:"))
    await state.set_state("waiting_card_number")

@dp.message_handler(state="waiting_card_number")
async def send_card_info(msg: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("card_payment_user")
    pos_id = data.get("card_payment_pos")
    color = data.get("selected_color", "–ù–µ —É–∫–∞–∑–∞–Ω")
    storage = data.get("selected_storage", "–ù–µ —É–∫–∞–∑–∞–Ω")
    price = data.get("final_price", "0")
    
    await state.finish()
    color1 = COLOR_MAP.get(color.lower(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç")
    storage_value = int(storage)
    storage_unit = "TB" if storage_value < 10 else "GB"
    pos = get_position(pos_id)

    msg_text = auto_translate(user_id, f"""üí≥ <b>–û–ø–ª–∞—Ç–∞ –∑–∞ –ü—Ä–æ–¥—É–∫—Ç:</b> {pos['name']} \n üé® <b>–¶–≤–µ—Ç:</b> {color1} \n üíæ <b>–ü–∞–º—è—Ç—å:</b> {storage}{storage_unit}\n <b>üíµ –°—É–º–º–∞:</b> {price} USD\n\n üì• <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n {msg.text}\n\n –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ I Paid¬ª.""")
                
    
    
    await bot.send_message(chat_id=user_id, text=msg_text, reply_markup=confirm_payment_button(pos_id, color, storage, price), parse_mode="HTML")
    await msg.answer(auto_translate(user_id, "‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."))

@dp.callback_query_handler(text_startswith="confirm_payment", state="*")
async def confirm_payment(call: CallbackQuery, state: FSMContext):
    callback_data = call.data.split(":")
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(callback_data) == 2:  # –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è `payment_id`)
        _, payment_id = callback_data

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        payment = db_fetchone("SELECT * FROM temp_payments WHERE id = ?", (payment_id,))
        if not payment:
            await call.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."), show_alert=True)
            return

        pos_id = payment["pos_id"]
        crypto = payment["crypto"]
        amount_crypto = float(payment["amount_crypto"]) if payment["amount_crypto"] else None
        color = payment["color"]
        storage = payment["storage"]
        price = amount_crypto  # –î–ª—è –∫—Ä–∏–ø—Ç—ã `price` = `amount_crypto`

    elif len(callback_data) == 5:  # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (–ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
        _, pos_id, color, storage, price = callback_data
        crypto = None
        amount_crypto = None

    else:
        await call.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã."), show_alert=True)
        return

    print(f"DEBUG: pos_id = {pos_id}, color = {color}, storage = {storage}, price = {price}, crypto = {crypto}")

    pos = get_position(pos_id)
    if pos is None:
        await call.answer(auto_translate(user_id, f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–¥—É–∫—Ç —Å ID {pos_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."), show_alert=True)
        return

    # –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–±–æ `payment_id` –¥–ª—è –∫—Ä–∏–ø—Ç—ã, –ª–∏–±–æ `pos_id` –¥–ª—è –∫–∞—Ä—Ç—ã
    final_approve_callback = f"final_approve:{call.from_user.id}:{payment_id}" if crypto else f"final_approve:{call.from_user.id}:{pos_id}:{color}:{storage}:{price}"
    color1 = COLOR_MAP.get(color.lower(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç")
    storage_value = int(storage)
    storage_unit = "TB" if storage_value < 10 else "GB"
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    payment_type = f"‚Çø {crypto.upper()} {amount_crypto}" if crypto else f"üí≥ bank card {price} USD"
    admin_msg = auto_translate(user_id, f"""
‚ö†Ô∏è –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!  
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username} ({call.from_user.id})  
üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç: <b>{pos['name']}</b>  
üé® –¶–≤–µ—Ç: {color1}  
üíæ –ü–∞–º—è—Ç—å: {storage}{storage_unit}  
üí∞ –¶–µ–Ω–∞: <b>{payment_type}</b>  
""")

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(auto_translate(user_id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"), callback_data=final_approve_callback)
    )

    for admin_id in get_admins():
        await bot.send_message(admin_id, admin_msg, reply_markup=keyboard, parse_mode="HTML")

    await call.message.edit_text(auto_translate(user_id, "‚è≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-30 –º–∏–Ω—É—Ç."))











def find_full_pos_id(short_pos_id):
    pos = get_position_by_short_id(short_pos_id)  # –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
    return pos['id'] if pos else None

@dp.callback_query_handler(text_startswith="final_approve", state="*")
async def final_approve(call: CallbackQuery, state: FSMContext):
    callback_data = call.data.split(":")

    if len(callback_data) == 3:  # –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π (—Ç–æ–ª—å–∫–æ `payment_id`)
        _, user_id, payment_id = callback_data

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ –ë–î
        payment = db_fetchone("SELECT * FROM temp_payments WHERE id = ?", (payment_id,))
        if not payment:
            await call.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."), show_alert=True)
            return

        pos_id = payment["pos_id"]
        crypto = payment["crypto"]
        amount_crypto = float(payment["amount_crypto"]) if payment["amount_crypto"] else None
        color = payment["color"]
        storage = payment["storage"]
        price = amount_crypto  # –î–ª—è –∫—Ä–∏–ø—Ç—ã `price` = `amount_crypto`

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        db_execute("DELETE FROM temp_payments WHERE id = ?", (payment_id,))

    elif len(callback_data) == 6:  # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ callback)
        _, user_id, pos_id, color, storage, price = callback_data
        crypto = None
        amount_crypto = None

    else:
        await call.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏."), show_alert=True)
        return

    print(f"DEBUG: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã - pos_id = {pos_id}, color = {color}, storage = {storage}, price = {price}, crypto = {crypto}")

    pos = get_position(pos_id)
    if pos is None:
        await call.answer(auto_translate(user_id, f"‚ùå –û—à–∏–±–∫–ü—Ä–æ–¥—É–∫—Ç–∞—Ä —Å ID {pos_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."), show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏
    payment_type = f"‚Çø {crypto.upper()} {amount_crypto}" if crypto else f"üí≥ bank card {price} USD"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(auto_translate(user_id, "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É"), callback_data=f"buy_pos:{pos_id}:{color}:{storage}:{price}")
    )
    color1 = COLOR_MAP.get(color.lower(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç")
    storage_value = int(storage)
    storage_unit = "TB" if storage_value < 10 else "GB"

    await bot.send_message(user_id, auto_translate(user_id, f"""‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n
–°–ø–æ—Å–æ–±: {payment_type}\n
üé® –¶–≤–µ—Ç: {color1}\n
üíæ –ü–∞–º—è—Ç—å: {storage}{storage_unit}\n
üí∞ –°—É–º–º–∞: {price} {crypto.upper() if crypto else 'USD'}"""),
                           reply_markup=keyboard)

    await call.message.edit_text(auto_translate(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–∫—É–ø–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞."))









####–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–∞–ª–±–µ–∫–æ–≤


@dp.callback_query_handler(lambda c: c.data.startswith("submenu_"))
async def open_submenu(call: CallbackQuery):
    _, submenu, pos_id, amount_rub, color, storage = call.data.split(":")
    keyboard = crypto_currency_menu(pos_id, amount_rub, color, storage, call.from_user.id, submenu=submenu)
    await call.message.edit_reply_markup(reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("back_to_main"))
async def back_to_main_menu(call: CallbackQuery):
    _, pos_id, amount_rub, color, storage = call.data.split(":")
    keyboard = crypto_currency_menu(pos_id, amount_rub, color, storage, call.from_user.id)
    await call.message.edit_reply_markup(reply_markup=keyboard)


# # # #  –°–º–µ–Ω–∞ —è–∑—ã–∫–∞


@dp.callback_query_handler(text="change_language", state="*")
async def choose_language(call: CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    languages = {
        "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "en": "üá¨üáß English",
        "es": "üá™üá∏ Espa√±ol",
        "de": "üá©üá™ Deutsch",
        "ar": "üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"
    }
    
    for lang_code, lang_name in languages.items():
        keyboard.add(InlineKeyboardButton(lang_name, callback_data=f"set_language:{lang_code}"))

    await call.message.edit_text(auto_translate(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"), reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="set_language:", state="*")
async def set_language(call: CallbackQuery):
    lang_code = call.data.split(":")[1]
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –ë–î
    db_execute("UPDATE users SET lang = ? WHERE id = ?", (lang_code, call.from_user.id))
    
    await call.answer(auto_translate(user_id, "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!"))
    await call.message.edit_text(auto_translate(user_id, "‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!"), reply_markup=user_menu(call.from_user.id))
    
    
# # # # 





@dp.callback_query_handler(text_startswith='buy_pos:', state="*")
async def pos_buy(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    callback_data = call.data.split(":", maxsplit=4)

    if len(callback_data) < 5:
        await call.message.answer(auto_translate(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."))
        return

    _, pos_id, color, storage, price = callback_data
    pos = get_position(pos_id)
    user = get_user(id=call.from_user.id)
    color1 = COLOR_MAP.get(color.lower(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç")
    storage_value = int(storage)
    storage_unit = "TB" if storage_value < 10 else "GB"
    await state.update_data(cache_pos_id_for_buy=pos_id, selected_color=color, selected_storage=storage, selected_price=price)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user['balance'] >= float(price):
        receipt = get_unix()
        buy_time = get_date()

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user(user['id'], balance=user['balance'] - float(price))

        # –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –≤ –ë–î
        add_purchase(
            user['id'], user['first_name'], user['user_name'], receipt, 1, float(price),
            pos['id'], pos['name'], auto_translate(user_id, "–ü—Ä–æ–¥—É–∫—Ç –≤—ã–¥–∞–Ω –≤—Ä—É—á–Ω—É—é"), buy_time, receipt, color, storage
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        msg = auto_translate(user_id, f"""
‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç: {pos['name']}
üé® –¶–≤–µ—Ç: {color1}
üíæ –ü–∞–º—è—Ç—å: {storage}{storage_unit}
üíµ –°—É–º–º–∞: {price}
üßæ –ß–µ–∫: {receipt}
üìÖ –î–∞—Ç–∞: {buy_time}

""")
        await call.message.edit_text(msg)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = auto_translate(user_id, f"""
üí∞ –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['user_name']} | <a href='tg://user?id={user['id']}'>{user['first_name']}</a>
üíµ –°—É–º–º–∞: {price}
üßæ –ß–µ–∫: {receipt}
üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç: {pos['name']}
üé® –¶–≤–µ—Ç: {color1}
üíæ –ü–∞–º—è—Ç—å: {storage}{storage_unit}
""")
        await send_admins(admin_msg, True)

    else:
        await call.answer(auto_translate(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!"), show_alert=True)
